#! /usr/bin/env python
# Version 3.1

import dirR
from os import getcwd
from os import path
from time import strftime
from sys import argv
from listR import intersect, biDifference, biSetDifference, stringizeL, fillAll, stringContains

def generatePlotFileCore(fList, plotFileName="plot.bat", preCmds="", postCmds="", labels=[], dirName="", useRelativePath=True):
  """ Generate a grace batch file for all files in subdirectory with names
  given in fList with suggested title and labels according to the
  difference of names of the subdirectories.
  fList has the structure [[filename, plotCommand, partialLabel],...].
  This is the core function with most parameters.
  parameter is a long control string that will be written in the plt file.
  labels is a list of strings that will be used as labels with plotIndex
  (see code) if non-empty."""
  # partial label is a label that is shared by all files with the same "filename"
  # "labels" list holds labels that are different among files with the same "filename"

  if dirName == "": dirName = getcwd();

  outFile = open(path.join(dirName,plotFileName), "w");
  # write header
  outFile.write("# Grace batch file generated by generateGraceBatchFile\n");
  outFile.write("#              generated on "+strftime("%Y-%m-%d@%H:%M:%S")+"\n\n\n");

  outFile.write("\n")
  if preCmds != "": outFile.write(preCmds);
  outFile.write("\n")


  plotBuffer = []; # store those plot commands without title content
  legendBuffer = []; # store all the raw titles, only the difference between them should go into the plot file
  partialLabels = []; # store all partial labels

  plotIndex = 0; # unique index that separate graphs apart
  # declare files to be plotted
  for fileName, plotCmd, partialLabel in fList:
    fileIndex = 0; # used for indexing labels
    for aDir in dirR.listNestedDirContainsFiles(dirName,fileName):
      if useRelativePath == True: # final form of "path" can be relative to cwd or absolute
        aDirFinal = aDir.replace(dirName,".")
      else:
        aDirFinal = aDir
      finalPath = path.join(aDirFinal, fileName); # final form of the path to the file
      # write plot commands buffer:
      gracePlotCmd = gnuplotToGrace(plotCmd,plotIndex); # change from gnuplot format to grace format
      plotCmdTmp = fillAll(gracePlotCmd, fileIndex) # if "%d" is in plotCmd, then plotIndex is being used as argument
      plotBuffer.append("read block "+'"'+finalPath+'"'+"\n"+plotCmdTmp+"\n"+"s%d legend "%plotIndex);
      if len(labels) < fileIndex+1:
        legendBuffer.append(processDirTreeName(aDirFinal));
      else:
        legendBuffer.append(labels[fileIndex]);
      partialLabels.append(partialLabel);
      plotIndex = plotIndex + 1;
      fileIndex = fileIndex + 1;

  # process titles: find parameters in common
  if labels == []: titleCommon = intersect(legendBuffer)

  # write plot commands
  upperB = len(plotBuffer)
  for ii in range(upperB):
    if labels == []:
      outFile.write(plotBuffer[ii]+'"'+partialLabels[ii]+" "+" ".join(list(biSetDifference(legendBuffer[ii],titleCommon)))+'"'+"\n\n");
    else:
      outFile.write(plotBuffer[ii]+'"'+partialLabels[ii]+" "+legendBuffer[ii]+'"'+"\n\n");


  outFile.write("autoscale"); # note that thie comes before postCmd since postCmd could redefine world coordinates

  outFile.write("\n")
  if postCmds != "": outFile.write(postCmds);
  outFile.write("\n")

  # save and write to ps file
  outFile.write('saveall "' + plotFileName.split(".")[0]+'.agr" \n');
  outFile.write('print to "' + plotFileName.split(".")[0]+'.ps" \n');
  outFile.write("print \n");

  outFile.write("exit\n");

  outFile.close();


def gnuplotToGrace(plotCmd, index):
  """ Change the string used in gnuplot specifying which columns to plot into
  strings recognizable by grace.
      For example, "($1/2):($2^2)" will be transformed to:
  "block xy 1:2 \\n s#.x=s#.x/2 \\n s#.y=s#.y^2" where "#"=index.
  """

  if (plotCmd.count("$") != 2) and (plotCmd.count(":")!=1):
    print("gnuplotToGrace: command not recognizable, ignored.");
    return "";

  ss = "s"+str(index); # -> "s#"

  graceCmd = ""; # initialize the resulting command
  pltX, pltY = plotCmd.split(":"); # split the string according to the colon symbol
  indX = pltX.find("$"); indY = pltY.find("$"); jumpX=1; jumpY=1;
  if "0"<=pltX[indX+2]<="9":
    numX=pltX[indX+1]+pltX[indX+2]; jumpX=2;
  else:
    numX=pltX[indX+1];
  if "0"<=pltY[indY+2]<="9":
    numY=pltY[indY+1]+pltY[indY+2]; jumpY=2;
  else:
    numY=pltY[indY+1];
  graceCmd = graceCmd + "block xy " + '"' + numX + ":" + numY +'"' # first part of graceCmd
  # graceCmd, transformation on x
  cmdX = pltX[:indX] + ss + ".x" + pltX[indX+1+jumpX:];
  if (cmdX[0]=='(') and (cmdX[-1]==')'): cmdX = cmdX[1:-1];
  cmdX = ss + ".x = " + cmdX;
  # graceCmd, transformation on y
  cmdY = pltY[:indY] + ss + ".y" + pltY[indY+1+jumpY:];
  if (cmdY[0]=='(') and (cmdY[-1]==')'): cmdY = cmdY[1:-1];
  cmdY = ss + ".y = " + cmdY;
  graceCmd = graceCmd + "\n" + cmdX + "\n" + cmdY

  return graceCmd;


def generatePlotFile(fList, plotFileName="plot.bat", title="", xlabel="", ylabel="", addons1=[], addons2=[], labels=[], dirName="", useRelativePath=True):
  """
  Generate a gnuplot file for all files in subdirectory with names
  given in fList with suggested title and labels according to the
  difference of names of the subdirectories.
  fList has the structure
  [[filename, column used as x, column used as y, partialLabel],...],
  or [[filename, plotCommand, partialLable],...] (standard).
  plotCommand is written in the standard of gnuplot.
  Argument addons is of the form [string of commands, string of commands, ...].
  If forPaper is True, no title is generated, and labels will use 20 fontsize. Parameter
  forPaper can also be given a number, in which case it will be interpreted as fontsize.
  """

  # convert to standard format (each sublist has length 2):
  if len(fList[0]) == 4: # format 5
    fListM = map(lambda x:[x[0],"($"+str(x[1])+"):($"+str(x[2])+")",x[3]], fList);
  elif len(fList[0]) == 3: # format 3 (standard)
    fListM = fList;
  else:
    print "generatePlotFile: Argument fList has wrong structure."
    return;

  preCmds = "";

  if dirName == "": dirName = getcwd();

  if xlabel == "": xlabel='r (fm)'
  if ylabel == "": ylabel='tau (fm/c)';
  xset = 'xaxis label ' + '"' + xlabel + '"';
  yset = 'yaxis label ' + '"' + ylabel + '"';

  if title == "": title = " ".join(stringizeL(fList))
  titleSet = 'title ' + '"' + title + '"';
  preCmds = preCmds + "timestamp on\n";

  preCmds = preCmds + titleSet + "\n" + xset + "\n" + yset + "\n"
  preCmds = preCmds + "\n".join(addons1) + "\n"
  postCmds = "\n".join(addons2) + "\n"

  generatePlotFileCore(fListM, plotFileName, preCmds, postCmds, labels, dirName, useRelativePath)



def processDirName(dirName):
  """ Generate a list of parameters from a directory name generated by record-hydro. """
  # cut time stamp
  return filter(lambda x: "--" in x, dirName.split(path.sep))[0].split("--")[0].split("-");



def processDirTreeName(dirName):
  """ Generate a list of parameters from a directory tree name. """
  return filter(lambda x: x!="", "-".join(dirName.split(path.sep)).split("--")[0].split("-"));



def combineBatchFiles(fileList, saveAs, dirName=""):
  """ Combine a series of batch file into one with file name saveAs.
  Each batch file is considered as an independent plot. Several commands
  are skipped in the process.
  """
  toBeSkipped = ["exit", "print", "save"]; # those lines contain these keywords will be skipped
  toBeUnique = ["define"]; # those lines contain these keywords will only appear once

  if dirName == "": dirName = getcwd();

  outFile = open(path.join(dirName, saveAs), "w");
  # write header
  outFile.write("# Combined grace batch file generated by combineBatchFile\n");
  outFile.write("#              generated on "+strftime("%Y-%m-%d@%H:%M:%S")+"\n\n\n");

  outFile.write("arrange ("+str(len(fileList))+",1,0.1,0.1,0.3)\n");

  plotIndex = 0;
  uniqueLinesBuffer = []; # this is the buffer for those lines that contain keywords defined in toBeUnique
  for fileName in fileList:
    inFile = open(path.join(dirName, fileName), "r");
    buffer = inFile.readlines();
    inFile.close();
    outFile.write("\n"+"with g"+str(plotIndex)+"\n\n");
    for aLine in buffer:
      if stringContains(aLine, toBeSkipped): continue;
      if stringContains(aLine, toBeUnique):
        if aLine.strip() in uniqueLinesBuffer:
          continue;
        else:
          uniqueLinesBuffer.append(aLine.strip());
      outFile.write(aLine);
    plotIndex += 1;

  # save and write to ps file
  outFile.write('saveall "' + saveAs.split(".")[0]+'.agr" \n');
  outFile.write('print to "' + saveAs.split(".")[0]+'.ps" \n');
  outFile.write("print \n");

  outFile.write("exit\n");
  outFile.close();




if __name__ == "__main__":
    if len(argv) == 1:
        print(
"""
  Welcome to generateGnuplotFile program! This program aims to
  simplify the process of generating gnuplot file from a large
  collection of files with the same file name.
  To use directly from a terminal, just put the desired function
  after "generateGnuplotFile", with arguments enclosed in
  appropriate quotes.
  For example:
  $generateGraceBatchFile.py generatePlotFile '[["surface.dat",5,2]]'
  Enjoy!
                                                    Zhi Qiu, 2010
"""
              )
    else:
        print("Executing: "+argv[1]+"("+",".join(argv[2:])+")")
        exec(argv[1]+"("+",".join(argv[2:])+")")
